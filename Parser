import java.util.HashMap;

public class Parser {
    private static HashMap<String, Double> listVariable;
    public Parser() { listVariable = new HashMap<>();
    }

//    Добавить новую переменную в список

    public static void setVariable(String nameVariable, Double valueVariable) {
        listVariable.put(nameVariable, valueVariable);
    }

//    Заменить значение существующей переменной

    public void replaceVariable(String nameVariable, Double valueVariable) {
        listVariable.replace(nameVariable, valueVariable);
    }

//    Возвращает значение переменной nameVariable

    public Double getVariable(String nameVariable) throws Exception {
        if (!listVariable.containsKey(nameVariable)) {
            throw new Exception("Ошибка: не найдена переменная " + nameVariable);
        }
        return listVariable.get(nameVariable);
    }

    /**
     * Парсим математическое выражение
     * @param s математическое выражение
     * @return результат * @throws Exception
     */
    public double resultExpression(String s) throws Exception {
        if (s.isEmpty()) {
            throw new Exception("Пустая строка.");
        }
        Calculate result = plusMinus(s);
        if (!result.rest.isEmpty()) {
            throw new Exception("Ошибка разбора выражения \n " + "rest: " + result.rest);
        }
        return result.resultCalc;
    }

    private Calculate startFunc(String s) throws Exception {
        Calculate cur = plusMinus(s);
        double acc = cur.resultCalc;
        cur.rest = deleteSpaces(cur.rest);
        while (cur.rest.length() > 0) {
            if (!(cur.rest.charAt(0) == '&' || cur.rest.charAt(0) == '|' || cur.rest.charAt(0) == '~')) break;
            char sign = cur.rest.charAt(0);
            String next = cur.rest.substring(1);
            cur = plusMinus(next);
            if (sign == '&') {
                acc = (int) acc & (int) cur.resultCalc;
            }
            else {
                acc = (int) acc | (int) cur.resultCalc;
            }
        }
        return new Calculate(acc, cur.rest);
    }

    private Calculate plusMinus(String s) throws Exception {
        Calculate cur = mulDiv(s);
        double acc = cur.resultCalc;
        cur.rest = deleteSpaces(cur.rest);
        while (cur.rest.length() > 0) {
            if (!(cur.rest.charAt(0) == '+' || cur.rest.charAt(0) == '-')) break;
            char sign = cur.rest.charAt(0);
            String next = cur.rest.substring(1);
            cur = startFunc(next);
            if (sign == '+'){
                acc += cur.resultCalc;
            }
            else {
                acc -= cur.resultCalc;
            }
        }
        return new Calculate(acc, cur.rest);
    }

    private Calculate mulDiv(String s) throws Exception {
        Calculate cur = exponentiation(s);
        double acc = cur.resultCalc;
        cur.rest = deleteSpaces(cur.rest);
        while (true) {
            if (cur.rest.length() == 0) return cur;
            char sign = cur.rest.charAt(0);
            if (sign != '*' && sign != '/') return cur;
            String next = cur.rest.substring(1);
            Calculate right = exponentiation(next);
            switch (sign) {
                case '*':
                    acc *= right.resultCalc;
                    break;
                case '/':
                    acc /= right.resultCalc;
                    break;
            }
            cur = new Calculate(acc, right.rest);
        }
    }

    private Calculate exponentiation(String s) throws Exception {
        Calculate cur = bracket(s);
        double acc = cur.resultCalc;

        cur.rest = deleteSpaces(cur.rest);
        while (true)
        {
            if (cur.rest.length() == 0)
                return cur;
            if (cur.rest.charAt(0) != '^')
                break;
            String next = cur.rest.substring(1);
            cur = bracket(next);
            cur.resultCalc = Math.pow(acc, cur.resultCalc);
        }
        return cur;
    }

    private Calculate bracket(String s) throws Exception {
        s = deleteSpaces(s);
        char zeroChar = s.charAt(0);
        if (zeroChar == '(') {
            Calculate r = plusMinus(s.substring(1));
            startFunc(s.substring(1));
            if (!r.rest.isEmpty()) {
                r.rest = r.rest.substring(1);
            } else {
                throw new Exception("Expected closing bracket");
            }
            return r;
        }
        return num(s);
    }

    private Calculate num(String s) throws Exception {
        int i = 0;
        int dot_cnt = 0;
        boolean negative = false;
//        число также может начинаться с минуса
        if (s.charAt(0) == '-') {
            negative = true;
            s = s.substring(1);
        }
//        разрешаем только цифры и точку
        while (i < s.length() && (Character.isDigit(s.charAt(i)) || s.charAt(i) == '.')) {
//            но также проверяем, что в числе может быть только одна точка !
            if (s.charAt(i) == '.' && ++dot_cnt > 1) {
                throw new Exception("not valid number '" + s.substring(0, i + 1) + "'");
            }
            i++;
        }
        if (i == 0) {
//            что - либо похожее на число мы не нашли
            throw new Exception("can't get valid number in '" + s + "'");
        }
        double resultCalc = Double.parseDouble(s.substring(0, i));
        if (negative) {
            resultCalc = -resultCalc;
        }
        String rest = s.substring(i);
        return new Calculate(resultCalc, rest);
    }

    private String deleteSpaces(String s) {
        return s.trim();
    }

    private class Calculate {
        public double resultCalc;       //    результат вычеслений
        public String rest;             //    остаток строки, которую еще не обработали

        public Calculate(double с, String r) {
            this.resultCalc = с;
            this.rest = r;
        }
    }
}
